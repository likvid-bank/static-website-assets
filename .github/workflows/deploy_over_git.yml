name: Deploy Website
on:
  push:
    #paths:
    #  - "buckets.yml"
    branches:
      - "feature/yml-buckets"

env:
  # from meshcloud-dev AWS root account SSO settings
  SSO_INSTANCE_ARN: arn:aws:sso:::instance/ssoins-69873586782ebb40
  ACCOUNT_ID: "060795938541"

jobs:
  deploy_website:
    runs-on: ubuntu-latest
    permissions: 
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Setup aws auth
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy buckets
        id: deploy
        run: |
          bucket_names=$(yq e '.buckets | keys | join(" ")' buckets.yml)
          for bucket_name in $bucket_names; do
            echo "Deploying bucket: $bucket_name"
            aws cloudformation deploy \
              --stack-name "s3-$bucket_name" \
              --template-file cloudformation-s3-static-website.yml \
              --parameter-overrides BucketName=m25-$bucket_name
          done

      - name: Setup aws auth for granting access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Grant Access to buckets
        run: |
          set -o errexit
          set -o errtrace
          set -o pipefail
          set -o nounset

          IDENTITY_STORE_ID="d-99672cb5d3"
          bucket_names=$(yq e '.buckets | keys | join(" ")' buckets.yml)
          for bucket_name in $bucket_names; do
            echo "Granting access to bucket: $bucket_name"
            permission_set_name="AccessBucket-$bucket_name"
            
            # Try to create the permission set
            AWS_PERMISSION_SET_ARN=$(aws sso-admin create-permission-set) \
              --instance-arn ${{ env.SSO_INSTANCE_ARN }} \
              --name "$permission_set_name" 2> /dev/null || true)

            # If the permission set creation failed (because it already exists), get the existing permission set
            if [ -z "$AWS_PERMISSION_SET_ARN" ]; then
              AWS_PERMISSION_SET_ARN=$(aws sso-admin list-permission-sets --instance-arn ${{ env.SSO_INSTANCE_ARN }} | jq -r --arg name "$permission_set_name" '.PermissionSets[] | select(. == $name)')
            fi

            aws sso-admin put-inline-policy-to-permission-set \
              --instance-arn ${{ env.SSO_INSTANCE_ARN }} \
              --permission-set-arn $AWS_PERMISSION_SET_ARN \
              --inline-policy '{
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Sid": "AccessBucket",
                          "Effect": "Allow",
                          "Action": [
                              "s3:*"
                          ],
                          "Resource": [
                              "arn:aws:s3:::m25-'$bucket_name'",
                              "arn:aws:s3:::m25-'$bucket_name'/*"
                          ]
                      }
                  ]
              }'

            users=$(yq e ".buckets.$bucket_name.users[]" buckets.yml)
            for user in $users; do
              echo "Granting access for $user..."
              user_principal_id=$(aws identitystore list-users --identity-store-id "$IDENTITY_STORE_ID" | jq -r --arg user "$user" '.Users[] | select(.UserName == $user) | .UserId')
              if [ -n "$user_principal_id" ]; then
                  aws sso-admin create-account-assignment \
                      --instance-arn "$SSO_INSTANCE_ARN" \
                      --target-id "$ACCOUNT_ID" \
                      --target-type AWS_ACCOUNT \
                      --permission-set-arn "$AWS_PERMISSION_SET_ARN" \
                      --principal-type USER \
                      --principal-id "$user_principal_id"
              else
                  echo "User $user not found in identity store."
              fi
            done
          done

      - name: Display website URL and upload instructions
        if: ${{ steps.changes.outputs.added != '' }}
        run: |
          echo "### You are almost there! ðŸš€

          Login via [AWS SSO](https://meshcloud-dev.awsapps.com/start/#)
          to AWS account **060795938541** and navigate to the [following link](https://eu-central-1.console.aws.amazon.com/s3/upload/${{ steps.get-output.outputs.bucket_name }}) 
          to upload files to your S3 bucket (you can drag and drop an index.html file to test it)

          For more details on the file structure, check out https://docs.aws.amazon.com/AmazonS3/latest/userguide/IndexDocumentSupport.html#IndexDocumentsandFolders

          ðŸš€ Once you upload your files, you can view your website at: ${{ steps.get-output.outputs.website_url }} ðŸš€" >> $GITHUB_STEP_SUMMARY
